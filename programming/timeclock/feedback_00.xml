<section>
	<title>Feedback #1</title>

	<p>After remotely showing the first prototype to a user, he gave some
	feedback and sketched out some other views.</p>

	<image src="images/feedback-00-worker-view.png"><title>Worker View</title></image>
	<image src="images/feedback-00-worker-view.png"><title>Worker Project View</title></image>
	<image src="images/feedback-00-customer-view.png"><title>Customer View</title></image>
	<image src="images/feedback-00-customer-project-view.png"><title>Customer Project View</title></image>
	<image src="images/feedback-00-customer-project-view.png"><title>Customer Project Date View</title></image>

	<p>They also said that the "Project Date View" should contain a place for comments and discussion and that when the project has fixed pricing, then the <c>Customer</c> shouldn't be able to view how many hours workers worked.</p>

	<p>From these views we can deduce several things. First merging resource use and worker work-time into a single thing isn't probably a good idea. It will be better if we break it up.</p>

	<section>
		<title>Adjusting models</title>

		<vcs repo="https://github.com/loov/timeclock" sha="e165e7904fcad53d98b2f7707f713763372255fa"></vcs>

		<p>One of the things that can be seen that the "sub-project" idea doesn't figure that much. Maybe we should remove <c>Task</c> for now and later re-add it.</p>

		<p>We also split the <c>Expense</c> into two separate items:
		<code language="go">
			type Activity struct {
				Worker   string    //TODO: ref
				Date     time.Time // when was the entry made
				Name string
				Start    time.Time
				Finish   time.Time
				Comment  string
			}

			func (a *Activity) Total() time.Duration {
				return a.Finish.Sub(a.Start)
			}

			type Material struct {
				Worker   string //TODO: ref
				Date     time.Time
				Resource Resource
				Units    float64
			}

			func (m *Material) Total() float64 {
				return m.Resource.PPU * m.Units
			}
		</code></p>

		<p>One of the things we may notice here is that these things require some amount of meta-information about the entry. This means we should remove the common items:
			<code language="go">
			type Event struct {
				Worker string
				Date   time.Time
			}

			type Activity struct {
				Event
			// ...

			type Material struct {
				Event
				Resource Resource
			// ...
			</code>
		</p>

		<p>We will adjust the server code accordingly:
			<code language="go"><![CDATA[
				example := &project.Project{
					Title:    "Alpha",
					Customer: "ACME",
					Pricing: project.Pricing{
						Hours: 480,
						Price: 1000,
					},
					Description: "Implement views",
					Status:      project.InProgress,
				}

				activites := []*project.Activity{
					{
						Event: project.Event{
							Worker: "John",
							Date:   time.Now(),
						},
						Name:    "Welding",
						Start:   time.Now().Add(-2 * time.Hour),
						Finish:  time.Now().Add(-1 * time.Hour),
						Comment: "A, B, C are done",
					},
					...
				}

				materials := []*project.Material{
					{
						Event: project.Event{
							Worker: "John",
							Date:   time.Now(),
						},
						Resource: project.Resource{ ... },
						Units: 8,
					},
				}

				err = t.Execute(w, map[string]interface{}{
					"Project":    example,
					"Activities": activites,
					"Materials":  materials,
				})
			]]></code></p>

			<p>One of the things we notice here is that there is a lot of different pieces moving around. It would be beneficial to organize all these different items into a single thing. So we will make <c>project.Info</c>:
				<code language="go">
					type Activities []*Activity
					type Materials []*Material

					type Info struct {
						Project    Project
						Activities Activities
						Materials  Materials
					}
				</code></p>

			<p>From the sketches we also see that we need a grouping by day, so we will also add:
				<code language="go">
					type DayInfo struct {
						Date       time.Time
						Activities Activities
						Materials  Materials
					}

					func (info *Info) GroupByDay() []DayInfo {
						// ...
				</code></p>

			<p>Of course we need to update the project view to.</p>
			<image src="images/project-info-02.png"><title>Project View</title></image>
	</section>

	<section>
		<title>Many tables</title>

		<p>At this point, I'm also thinking whether some sort of abstraction to allow more easily to describe the tables would be beneficial. Currently we have several instances of templates:
			<code language="html"><![CDATA[
				{{if .Activities}}
				<div class="label">Activities:</div>
				<table class="activities">
					<thead>
						<tr>
							<th>Worker</th>
							<th>Activity</th>
							<th>Start</th>
							<th>Finish</th>
							<th>Duration</th>
						</tr>
					</thead>
				{{range .Activities}}
					<tr>
						<td>{{.Worker}}</td>
						<td>{{.Name}}</td>
						<td>{{.Start.Format "15:04"}}</td>
						<td>{{.Finish.Format "15:04"}}</td>
						<td>{{.Duration}}</td>
					</tr>
				{{end}}
				</table>
				{{end}}
			]]></code>
		</p>

		<p>Whereas ideally we could do something like:
			<code language="html">
				{{ table .Activities
					"Worker"   .Worker
					"Name"     .Name
					"Start"    (.Start.Format "15:04")
					"Finish"   (.Finish.Format "15:04")
					"Duration" .Duration
				}}
			</code>
		</p>

		<p>I'm not sure how to implement it, but it is something to think about. For now we can implement the tables manually, before finding a way to implement it. It might be faster to do it manually, until we know what features will be necessary in that thing.</p>
	</section>
</section>

