<section>
	<title>Magic Number 4</title>

	<quote by="Nikola Tesla" class="epigraph">The scientists of today think deeply instead of clearly. One must be sane to think clearly, but one can think deeply and be quite insane.</quote>

	<premise>Whenever we are describing or explaining concepts there is a strict limit how much we can keep in our heads at once. However, if we use few things to explain things, then we increase the number of "abstraction layers".</premise>

	<therefore>When describing an concept use 4Â±1 other ideas to explain it.</therefore>

	<group title="Description">
		<p>People have a well known limit in their processing capabilities called magic number four.<ref href="https://en.wikipedia.org/wiki/Working_memory#Capacity" /><ref href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2864034/"></ref> Anytime we exceed this limit then the explanation of the concept doesn't fit into our working memory.</p>

		<p>Going the other way, using as few other ideas, doesn't work either. If we need in total 5 things to explain something, and we use 2 things to explain each thing. This in the best case would create two additional ideas or concepts.</p>

		<todo>DIAGRAMS</todo>
	</group>

	<group title="Evaluation">
		<p>Counting `ideas` properly is difficult, but it is good principle to think about. Here the proof is in the pudding. If you cannot keep the ideas in your head, this means that you have exceeded the limit.</p>

		<p>To test this, use Naked-CRC cards<ref href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052"></ref> (or equivalent for your paradigm) to describe the behavior of the system to another programmer. Communicate the names/ideas verbally, but keep around a generic non-colored thing to represent them. If the programmer can explain afterwards, then it probably is below the average processing limit.</p>

		<p>There's also a phone test, see whether you can explain your idea over the phone and properly carry it over. This requires the other person to hold all the ideas in their head.</p>
	</group>


	<group title="Subtleties">
		<p>This 4+-1 doesn't mean that you cannot have more than 5 lines in your method. Or that you cannot have more than 5 ideas in your method. The main thing we are concerned about is how many concepts does person have hold in their head to understand.</p>

		<p>By limiting the number lines or ideas per function can do harm. One of such
		examples is a game loop.<ref href="http://number-none.com/blow/john_carmack_on_inlined_code.html"></ref></p>

		<code>
		while(!exited){
			update mouse
			update systems
			update entities
			draw entites
			draw hud
			blit to screen
		}
		</code>

		<code>
		update(){
			update mouse
			update systems
			update entities
		}

		draw(){
			draw entites
			draw hud
		}

		while(!exited){
			update()
			draw()
			blit to screen
		}
		</code>

		<p>We have increased our LOC, without actually reducing the complexity. The first case is perfectly understandable, we need to keep in mind that we are in the `while` loop and any specific action we are doing.</p>

		<p>Grouping and comments would have kept the game-loop more concise and easier
		to follow.</p>

		<code>
		while(!exited){
			{ // updating
				update mouse
				update systems
				update entities
			}
			{ // drawing
				draw entites
				draw hud
			}
			{ // loop update
				blit to screen
			}
		}
		</code>

		<p>It should also be noted that when a single class, type or function has two ideas together wihout unifying idea, it should be counted as two ideas.</p>

		<todo-big>EXAMPLES</todo-big>
	</group>

	<group title="Extremes">
		<p>This doesn't mean there are cases where that this bounds shouldn't be broken. Sometimes the essential complexity of the idea requires multiple things. Sometimes it's not necessary to use more ideas.</p>

		<p>Distributed algorithms can easily violate these rules, because you need to account for different kinds of failures and failovers. We can take (quorum) algorithm. In those cases human verification becomes difficult or near impossible. We can use program verification to prove properties of the system. Alternatively we can substitute them with easier to understand algorithms, such as Raft, that may not have as good properties, but we are less likely to make a mistake in it's implementation.</p>

		<p>Now when you don't have 3 things to explain your idea, which can often be the case when implementing trivial things, there's not point in inventing new things to satisfy the constraint.</p>
	</group>

	<group title="Building">

	</group>

	<group title="Notes">
		<p>It should be noted that good programmers tend have a better skill in moving
		around these "idea groupings" <todo>link Chris Granger</todo>, however, good algorists tend
		to be better at being able to hold more things in their head <todo>verify</todo>.
		It's easy to see why, software development mostly requires creating, manipulating
		and making groups of ideas interact; alternatively figuring out why
		multiple groups of ideas do not interact properly. Whereas algorithms require
		clever manipulation of concurrent ideas.</p>

		<todo-big>Similarities to Grady Booch in "Object Solutions"....</todo-big>
		<todo-big>Cohesion in Structured Analysis and System Specification</todo-big>
		<todo-big>http://vanderburg.org/blog/2011/01/31/cohesion.html</todo-big>
	</group>

	<references>
	</references>
</section>